/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f401cc.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#define FLASH_ACR_LATENCY_3WS                ((uint32_t)0x00000003)
#define FLASH_ACR_ICEN                       ((uint32_t)0x00000200)
#define FLASH_ACR_DCEN                       ((uint32_t)0x00000400)
#define  TIM_SR_UIF                          ((uint16_t)0x0001)            /*!<Update interrupt Flag              */
static void SetSystemClockTo16Mhz(void);

static void ConfigureTimer2(void);

static void delay( uint32_t ms );

int main(void)
{
    /* Loop forever */
	SetSystemClockTo16Mhz();
	ConfigureTimer2();

	volatile uint32_t *Timer_SR = (uint32_t*)0x40000010;

	*Timer_SR |= (1<<0);

	Rcc->AHB1ENR |= (1<<2);

	Gpioc->MODER &= ~(3<<26);

	Gpioc->MODER |= (1<<26);

	while(1)
	{
		Gpioc->ODR |=(1<<13);

		delay(10000);

		Gpioc->ODR &= ~(1<<13);

	}



}
static void SetSystemClockTo16Mhz(void)
{
	/* Enabling the HSE clock - If not enabled and ready */
	if( (Rcc->CR & (1<<17)) == 0 )
	{
		Rcc->CR |= 1<<16;



		while(!(RCC_CR & 1<<17));
	}

	 /* APB1 prescaler to 1 */
	  Rcc->CFGR &= ~(7<<10);

	 /* APB1 prescaler to 1 */
	  Rcc->CFGR &= ~(7<<13);

	  /* Select the HSI as system clock source */
	  Rcc->CFGR &= (uint32_t)((uint32_t)~(3<<0));
	  Rcc->CFGR |= (1<<0);





//	  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
}

static void ConfigureTimer2(void)
{
  /* Enable the APB clock FOR TIM2  */
	Rcc->APB2ENR |= (1<<17);

  /* fCK_PSC / (PSC[15:0] + 1)
     (16 MHz / (15+1)) = 1 MHz timer clock speed */
	TIM2->TIM_PSC = 15;

  /* (1 MHz / 1000) = 1KHz = 1ms */
  /* So, this will generate the 1ms delay */
  TIM2->TIM_ARR = 999;

  /* Finally enable TIM3 module */
	  TIM2->TIM_CR1 = (1 << 0);

	   TIM2->TIM_SR &= ~TIM_SR_UIF;
}

static void delay( uint32_t ms )
{
	TIM2->TIM_CCR1 |= (1<<1);

	TIM2->
}


