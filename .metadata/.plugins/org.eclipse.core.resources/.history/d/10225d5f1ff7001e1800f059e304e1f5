/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f401cc.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

static void SetSystemClockTo16Mhz(void);

static void ConfigureTimer2(void);

static void delay( uint32_t ms )
int main(void)
{
    /* Loop forever */
	SetSystemClockTo16Mhz();
	ConfigureTimer2();
	for(;;);
}
static void SetSystemClockTo16Mhz(void)
{
	/* Enabling the HSI clock - If not enabled and ready */
	if( (Rcc->CR & (1<<1)) == 0 )
	{
		Rcc->CR |= 1<<0;
	}

	 /* APB1 prescaler to 1 */
	  Rcc->CFGR &= ~(7<<10);

	 /* APB1 prescaler to 1 */
	  Rcc->CFGR &= ~(7<<13);


}

static void ConfigureTimer2(void)
{
  /* Enable the APB clock FOR TIM2  */
	Rcc->APB1ENR |= (1<<0);

  /* fCK_PSC / (PSC[15:0] + 1)
     (16 MHz / (15+1)) = 1 MHz timer clock speed */
	TIM2->TIM_PSC = 15;

  /* (1 MHz / 1000) = 1KHz = 1ms */
  /* So, this will generate the 1ms delay */
  TIM2->TIM_ARR = 999;

  /* Finally enable TIM3 module */
	  TIM2->TIM_CCR1 = (1 << 0);
}

static void delay( uint32_t ms )
{
  uint32_t i;
  for( i = 0; i <= ms; i++ )
  {
    /* Clear the count */
    TIM2->TIM_CNT = 0;

    /* Wait UIF to be set */
    while((TIM3->SR & TIM_SR_UIF) == 0);    /* This will generate 1ms delay */

    /* Reset UIF */
    TIM3->SR &= ~TIM_SR_UIF;
  }
}

