/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f401cc.h>
#include <stdio.h>
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
uint32_t *ADC_CCR = (uint32_t *)(ADC1_BASEADDR + 0x300);
void config_adc();

unsigned int adc_conversion(void)
{
	unsigned int adc_data=0;

	// SWSTART: Start conversion of regular channels
	ADC->CR[1] |= 1<<30;

	while(!(ADC->SR & 0x2));  //waiting for adc conversion update EOC flag
	adc_data = ADC->DR;
	return adc_data;
}
int main(void)
{
    /* Loop forever */
	//Enable GpioB Clock
		RCC->AHB1ENR |= (1<<1);
	//Enable ADC1 Clock
		RCC->APB2ENR |= (1<<8);
		//Clear the Moder regiser bit 2 and 3
		GPIOB->MODER &= ~(3<<2);
	//Set GPIO Mode to the pin 1
		GPIOB->MODER |= (3<<2);

		config_adc();



		uint32_t data=0;
		data =  adc_conversion();
		printf("%d",data );
	for(;;);
}
void config_adc()
{
	//Clear the status register
	ADC->SR &= ~(0x3F);

	//ADC on
	ADC->CR[1] |= (1<<0);

	ADC->SMPR[1] |= (1<<1);

	//setting the resolution for the bit
	ADC->CR[0] &= ~(3<<24);

	ADC->CR[0] |= (1<<25);

	//15:13DISCNUM[2:0]: Discontinuous mode channel count
	ADC->CR[0] &= ~(7<<13);

	//Bits 4:0 SQ1[4:0]: 1st conversion in regular sequence
	ADC->SQR[2] &= ~(0x1F<<0);

	//Set prescaler to 0
	*ADC_CCR &= ~(3<<16);
}
